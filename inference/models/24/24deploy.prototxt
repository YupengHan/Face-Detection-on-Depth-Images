name: "Depth_24Test_Net"

# data layer ---------------------------------- begin
layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param {
    shape {
      dim: 1
      dim: 1
      dim: 24
      dim: 24
    }
  }
}

# data layer ---------------------------------- end
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 8
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
} # 10x10
layer {
  name: "conv1_1/bn"
  type: "BN"
  bottom: "conv1_1"
  top: "conv1_1/bn"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1/bn"
  top: "conv1_1/bn"
}
layer {
  name: "pool1_1"
  type: "Pooling"
  bottom: "conv1_1/bn"
  top: "pool1_1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
} # 5x5
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "data"
  top: "conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 8
    kernel_size: 3
	stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
} # 10x10
layer {
  name: "conv1_2/bn"
  type: "BN"
  bottom: "conv1_2"
  top: "conv1_2/bn"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2/bn"
  top: "conv1_2/bn"
}
layer {
  name: "res1"  
  type: "Eltwise"  
  bottom: "pool1_1"
  bottom: "conv1_2/bn"
  top: "res1"  
  eltwise_param {  
    operation: SUM
  }  
} #11x11
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "res1"
  top: "conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
} # 9x9
layer {
  name: "conv2_1/bn"
  type: "BN"
  bottom: "conv2_1"
  top: "conv2_1/bn"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1/bn"
  top: "conv2_1/bn"
}
layer {
  name: "pool2_1"
  type: "Pooling"
  bottom: "conv2_1/bn"
  top: "pool2_1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
} # 5x5
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "res1"
  top: "conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    kernel_size: 3
	stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
} # 9x9
layer {
  name: "conv2_2/bn"
  type: "BN"
  bottom: "conv2_2"
  top: "conv2_2/bn"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2/bn"
  top: "conv2_2/bn"
}
layer {
  name: "res2"  
  type: "Eltwise"  
  bottom: "pool2_1"
  bottom: "conv2_2/bn"
  top: "res2"  
  eltwise_param {  
    operation: SUM
  }  
} #11x11
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "res2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
} # 3x3
layer {
  name: "conv3/bn"
  type: "BN"
  bottom: "conv3"
  top: "conv3/bn"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3/bn"
  top: "conv3/bn"
}
layer {
  name: "fc4"
  type: "InnerProduct"
  bottom: "conv3/bn"
  top: "fc4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "fc4"
  top: "fc4"
}

layer {
  name: "ip_cls"
  type: "InnerProduct"
  bottom: "fc4"
  top: "ip_cls"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "prob1"
  type: "Softmax"
  bottom: "ip_cls"
  top: "prob1"
}

layer {
  name: "ip_roi"
  type: "InnerProduct"
  bottom: "fc4"
  top: "ip_roi"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}



